<?php
/**
 * @file
 * Code for the us_classes feature.
 */

include_once 'us_classes.features.inc';

/**
 * Implements hook_theme().
 */
function us_classes_theme($existing, $type, $theme, $path) {
  return array(
    'us_classes_involvement_user' => array(
      'variables' => array(
        'user' => NULL,
        'involvement' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_field_access().
 *
 * Note field_permissions module is overkill here.
 */
function us_classes_field_access($op, $field, $entity_type, $entity, $account) {
  $is_committee = in_array('committee', $account->roles);


  $fields = array('field_status', 'field_dates');
  if (in_array($field['field_name'], $fields) && $op == 'edit') {
    return $is_committee;
  }

  return TRUE;
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function us_classes_field_widget_multiple_selects_form_alter(&$element, &$form_state, $context) {
  // Sort the facilitators values, because they are altered post-sort by
  // theme_username(). This makes facilitators easier to find in the list.
  if ($context['instance']['field_name'] == 'field_facilitators') {
    if (isset($element['target_id']['#options'])) {
      asort($element['target_id']['#options']);
    }
  }
}

/**
 * Implements hook_block_info().
 *
 * @todo Remove this when hook_user_view() bus is fixed.
 */
function us_classes_block_info() {
  // This example comes from node.module.
  $blocks['user_classes_involvement'] = array(
    'info' => t('Classes involved in'),
//    'cache' => DRUPAL_NO_CACHE
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * @todo Remove this when hook_user_view() bus is fixed.
 */
function us_classes_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'user_classes_involvement':
      if ($account = menu_get_object('user')) {
        $block['subject'] = t('Classes involved in');
        $block['content'] = us_classes_user_classes_involvement_render($account);
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_node_view().
 */
function us_classes_node_view($node, $view_mode, $langcode) {
  switch ($node->type) {
    case 'class':
      $build = array();
      if ($view_mode == 'full') {
        $build['title'] = array(
          '#markup' => '<h2>' . t('Class involvement') . '</h2>',
        );
      }
      $build['content'] = us_classes_involvement_render($node);
      $node->content['us_classes_involvement'] = $build;
      break;
  }
}

/**
 * Implements hook_user_view().
 *
 * @todo Why is this not displaying?
 */
function us_classes_user_view($account, $view_mode, $langcode) {
//  $build = array();
//  $build['title'] = array(
//    '#markup' => '<h2>' . t('Classes involved in') . '</h2>',
//  );
//  $build['classes'] = us_classes_user_classes_involvement_render($account);
//  $rendered = drupal_render($build);
//  $account->content['summary']['us_classes_user_classes_involvement'] =  array(
//    '#type' => 'user_profile_item',
//    '#title' => t('Classes involved in'),
//    '#markup' => $rendered,
//    '#attributes' => array('class' => array('classes')),
//  );
}

/**
 * Implements hook_field_extra_fields().
 */
function us_classes_field_extra_fields() {
  $extra['node']['class']['display'] = array(
    'us_classes_involvement' => array(
      'label' => t('Class involvement'),
      'description' => t('A list of users involved with the class.'),
      'weight' => 10,
    ),
  );
//  $extra['user']['user']['display'] = array(
//    'us_classes_user_classes_involvement' => array(
//      'label' => t('Class involvement'),
//      'description' => t('A list of classes this user is involved with.'),
//      'weight' => 10,
//    ),
//  );
  return $extra;
}

/**
 * Renders a list of classes the user is involved in.
 *
 * @param $account
 */
function us_classes_user_classes_involvement_render($account) {
  $entity_type = 'node';
  $bundle = 'class';
  $field_name = 'field_facilitators';
  $ids = array();

  // Find classes this user proposed.
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', $entity_type)
    ->entityCondition('bundle', $bundle)
    ->propertyCondition('uid', $account->uid)
    ->execute();
  if (isset($result[$entity_type])) {
    $ids = array_merge($ids, array_keys($result[$entity_type]));
  }

  // Find classes this user is facilitating.
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', $entity_type)
    ->entityCondition('bundle', $bundle)
    ->fieldCondition($field_name, 'target_id', $account->uid)
    ->execute();
  if (isset($result[$entity_type])) {
    $ids = array_merge($ids, array_keys($result[$entity_type]));
  }

  // Remove duplicates.
  $ids = array_unique($ids);

  // Order by title here as opposed to the query, because we are merging two
  // query results together.
  $nodes = node_load_multiple($ids);
  $keyed = array();
  foreach ($nodes as $node) {
    $keyed[check_plain($node->title)] = $node;
  }
  ksort($keyed);
  // Reset to their original IDs so _field_invoke_multiple() doesn't freak.
  $rekeyed = array();
  foreach ($nodes as $node) {
    $rekeyed[$node->nid] = $node;
  }

  if (!empty($ids)) {
    $output = node_view_multiple($rekeyed);
  }
  else {
    $output = array(
      '#markup' => '<div class="alert alert-warning">' . t('This person is not involved in any classes yet.') . '</div>',
    );
  }

  return $output;
}

/**
 * Includes the node author in the list of facilitators.
 *
 * @param object $node
 *   The node object.
 */
function us_classes_add_author_as_facilitator($node) {
  try {
    $wrapper = entity_metadata_wrapper('node', $node);
    $field_name = 'field_facilitators';
    $included = ($values = $wrapper->$field_name->raw()) && in_array($node->uid, $values) ? TRUE : FALSE;
    if (!$included) {
      $values[] = $node->uid;
      $wrapper->$field_name->set($values);
      $wrapper->save();
    }
  }
  catch(\EntityMetadataWrapperException $e) {
    // Do nothing. If this fails we have done something wrong.
  }
}

/**
 * Function to render the class involvement list of users.
 *
 * Note we're not making a view mode on profile2 (we could, but we'd be
 * repeating the query we need to do here anyway for sorting). And views would
 * be overkill here, since we want each user's item to include reverse
 * entity references, node authorship, and later flags (for interest) - and sort
 * the list by those as well.
 *
 * @param object $node
 *   The class node object.
 *
 * @return array
 *   A render array for the class involvement list.
 */
function us_classes_involvement_render($node) {
  try {
    $wrapper = entity_metadata_wrapper('node', $node);

    // Start the list of users involved in the class.
    $list = array();

    // @todo Consider supporting a multiple proposers field (for when a group
    //   arrives at an idea together). For now, only the node author is
    //   listed as having proposed the class.
    $uid = $wrapper->author->uid->value();
    $list[$uid][] = t('Proposed');

    // Find the users who are helping to organize the class (facilitating). Add
    // them to the list if they're not already (either way, add 'facilitating'
    // to the user's level of participation comma-separated list.
    $field_name = 'field_facilitators';
    $uids = $wrapper->$field_name->raw();
    foreach ($uids as $uid) {
      $list[$uid][] = t('Facilitating');
    }

    // @todo, Find the users who are interested in the class, and add them too.

    // Pass to a theme function, to wrap the user class involvement info in
    // markup that we can style.
    $build = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('class-involvement'),
      ),
    );

    // Loop over the list of users, and get the themed render array.
    foreach ($list as $uid => $involvement) {
      $user = user_load($uid);
      $variables = array(
        'user' => user_load($uid),
        'involvement' => $involvement,
      );
      $build[$uid] = theme('us_classes_involvement_user', $variables);
    }
    return $build;
  }
  catch(\EntityMetadataWrapperException $e) {
    // Do nothing. If this fails we have done something wrong.
  }
}

/**
 * Returns HTML for a foo.
 *
 * @param array $variables
 *   An associative array containing:
 *   - user: A user object that is being formatted.
 *   - involvement: An array of strings describing the user's involvement. These
 *     should be sanitized before being passed here.
 *
 * @ingroup themeable
 *
 * @return array
 *   A Drupal render array for the class involvement section markup.
 */
function theme_us_classes_involvement_user($variables) {
  $user = $variables['user'];
  $involvement = $variables['involvement'];

  $build = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('user-involved'),
    ),
  );

  $build['avatar'] = array(
    '#markup' => theme('user_picture', array('account' => $user, 'user_picture_style' => 'tiny')),
  );

  $build['name'] = array(
    '#markup' => theme('username', array('account' => $user)),
    '#prefix' => '<span class="user-name">',
    '#suffix' => '</span>',
  );

  $build['involvement'] = array(
    '#markup' => implode(', ', $involvement),
    '#prefix' => '<span class="user-involvement">',
    '#suffix' => '</span>',
  );

  return $build;
}
