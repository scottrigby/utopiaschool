<?php
/**
 * @file
 * Code for the us_classes feature.
 */

include_once 'us_classes.features.inc';

/**
 * Implements hook_field_access().
 *
 * Note field_permissions module is overkill here.
 */
function us_classes_field_access($op, $field, $entity_type, $entity, $account) {
  $is_committee = in_array('committee', $account->roles);


  $fields = array('field_status', 'field_dates');
  if (in_array($field['field_name'], $fields) && $op == 'edit') {
    return $is_committee;
  }

  return TRUE;
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function us_classes_field_widget_multiple_selects_form_alter(&$element, &$form_state, $context) {
  // Sort the facilitators values, because they are altered post-sort by
  // theme_username(). This makes facilitators easier to find in the list.
  if ($context['instance']['field_name'] == 'field_facilitators') {
    if (isset($element['target_id']['#options'])) {
      asort($element['target_id']['#options']);
    }
  }
}

/**
 * Includes the node author in the list of facilitators.
 *
 * @param object $node
 *   The node object.
 */
function us_classes_add_author_as_facilitator($node) {
  try {
    $wrapper = entity_metadata_wrapper('node', $node);
    $field_name = 'field_facilitators';
    $included = ($values = $wrapper->$field_name->raw()) && in_array($node->uid, $values) ? TRUE : FALSE;
    if (!$included) {
      $values[] = $node->uid;
      $wrapper->$field_name->set($values);
      $wrapper->save();
    }
  }
  catch(\EntityMetadataWrapperException $e) {
    // Do nothing. If this fails we have done something wrong.
  }
}
