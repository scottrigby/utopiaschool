<?php

/**
 * Implements hook_node_insert().
 */
function us_notifications_node_update($node) {
  if (!empty($node->status) && $node->type == 'class') {
    us_notifications_send($node);
  }
}

/**
 * Implements hook_comment_insert().
 */
function us_notifications_comment_insert($comment) {
  if ($comment->status == COMMENT_PUBLISHED) {
    $node = node_load($comment);
    if ($node->type == 'class') {
      us_notifications_comment_send($comment);

      // Subscribe the user.
      $flag = flag_get_flag('subscribe_class');
      $flag->flag('flag', $comment->nid, user_load($comment->uid), TRUE);
    }
  }
}

/**
 * Get users who should be notified of a change on a class.
 *
 * @param $node
 * @return array
 *
 * @see us_classes_involvement_render()
 */
function us_notifications_get_users($node) {
  try {
    $wrapper = entity_metadata_wrapper('node', $node);

    // Start the list of users who should be notified.
    $ids = array();

    // Proposed.
    $uid = $wrapper->author->uid->value();
    $ids[] = $uid;

    // Facilitating.
    $field_name = 'field_facilitators';
    $uids = $wrapper->$field_name->raw();
    foreach ($uids as $uid) {
      $ids[] = $uid;
    }

    // Flagged.
    $flag_name = 'subscribe_class';
    $flags = flag_get_entity_flags('node', $node->nid, $flag_name);
    foreach ($flags as $data) {
      $ids[] = $data->uid;
    }

    return array_unique($ids);
  }
  catch(\EntityMetadataWrapperException $e) {
    // Do nothing. If this fails we have done something wrong.
  }
}

/**
 * Implements hook_mail().
 */
function us_notifications_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}

function us_notifications_send($node) {
  // Check attributes (fields or properties of the class node) we care about.
  // Note we can't use format_plural() because this only refers to grammar, not
  // actual plural values. Or does it?
  $attributes = array(
    'title',
    'body',
    'field_dates',
    'field_facilitators',
    'field_resources',
  );

  try {
    // Note EntityMetadataWrapper keys are cached.
    $wrapper = entity_metadata_wrapper('node', $node);
    $original_wrapper = entity_metadata_wrapper('node', $node->original);

    // Iterate over the attributes to see if any have changed.
    foreach ($attributes as $name) {
      $info = $wrapper->$name->info();
      // Because updated or original arrays sometimes contains more keys than
      // the other, filter out uncommon keys before comparing.
      $original = $original_wrapper->$name->value();
      $updated = $wrapper->$name->value();
      $original = us_notifications_array_intersect_key_recursive($original, $updated);
      $updated = us_notifications_array_intersect_key_recursive($updated, $original);

      if (serialize($original) !== serialize($updated)) {
        $changed[] = $info['label'];
        // If even a single field has changed, but it has a multiple delta, it
        // should be pluralized below.
        reset($original);
        if (is_numeric(key($original))) {
          $plural = TRUE;
        }
      }
    }
  }
  catch(\EntityMetadataWrapperException $e) {
    // Do nothing. If this fails we have done something wrong.
  }

  // Only bother continuing if changes we care about have happened.
  if (empty($changed)) {
    return;
  }

  // Build the message body.
  $body[] = "Hi [user:name],";

  $count = count($changed);
  $last = array_pop($changed);
  $args = array(
    '!attribute' => $last,
    '!attributes' => implode(', ', $changed) . ' and ' . $last,
    '!verb' => isset($plural) ? 'have' : 'has',
  );
  $body[] = format_plural($count, 'The class !attribute !verb changed.', 'The class !attributes have changed.', $args);

  $body[] = 'See the updated info here:
[node:url]';

  $body[] = '--
You are receiving this email because you are proposing, facilitating, or following this class. To stop receiving it\'s updates, you can click "+ Change my involvement" at [node:url].';

  // Get users subscribed to this class.
  $uids = us_notifications_get_users($node);
  $users = user_load_multiple($uids);
  foreach ($users as $user) {
    // Make sure user can access node before showing node information.
    if (!node_access('view', $node, $user)) {
      continue;
    }

    $raw_values = array(
      'subject' => '[site:name]: The class "[node:title]" has been updated',
      'body'  => implode("\n\n", $body),
    );

    $message = array();
    foreach ($raw_values as $k => $v) {
      $message[$k] = token_replace(t($v), array('node' => $node, 'user' => $user), array('sanitize' => FALSE));
    }

    drupal_mail('us_notifications', 'us_notifications_mail', $user->mail, user_preferred_language($user), $message);
  }
}

function us_notifications_comment_send($comment) {
  // Build the message body.
  $body[] = "Hi [user:name],";

  $body[] = '[comment:author] has commented on: "[comment:node:title]"';

  $body[] = 'See the comment here:
[comment:url]';

  $body[] = '--
You are receiving this email because you are proposing, facilitating, or following this class. To stop receiving it\'s updates, you can click "+ Change my involvement" at [comment:node:url].';

  // Get users subscribed to this class.
  $node = node_load($comment->nid);
  $uids = us_notifications_get_users($node);
  $users = user_load_multiple($uids);

  // Don't send to the user who commented.
  if (isset($users[$comment->uid])) {
    unset($users[$comment->uid]);
  }

  foreach ($users as $user) {
    // Make sure user can access node before showing node information.
    if (!node_access('view', $node, $user)) {
      continue;
    }

    $raw_values = array(
      'subject' => '[site:name]: New comment on "[comment:node:title]"',
      'body'  => implode("\n\n", $body),
    );

    $message = array();
    foreach ($raw_values as $k => $v) {
      $message[$k] = token_replace(t($v), array('node' => $node, 'user' => $user, 'comment' => $comment), array('sanitize' => FALSE));
    }

    drupal_mail('us_notifications', 'us_notifications_mail', $user->mail, user_preferred_language($user), $message);
  }
}

/**
 * Ensures an array has the same recursive key structure as another array.
 *
 * - Sorts the keys (otherwise comparison will fail)
 * - Recursively intersects keys, except leaves numeric deltas
 *
 * @param array $master
 * @param array $mask
 * @return array
 *   An array containing all the entries of master which have keys that are
 *   numeric and or are present in mask.
 */
function us_notifications_array_intersect_key_recursive($master, $mask) {
  if (!is_array($master)) {
    return $master;
  }
  ksort($master);
  ksort($mask);
  foreach ($master as $k => $v) {
    // If $k is numeric, leave it alone. This is a specific requirement for
    // Drupal object attribute deltas. Otherwise, remove value from $master if
    // the key is not present in $mask.
    if (!is_numeric($k) && !isset($mask[$k])) {
      unset ($master[$k]);
      continue;
    }
    // Recurse when mask is an array, else simply keep value.
    if (isset($mask[$k]) && is_array($mask[$k])) {
      $master[$k] = us_notifications_array_intersect_key_recursive($master[$k], $mask[$k]);
    }
  }
  return $master;
}
