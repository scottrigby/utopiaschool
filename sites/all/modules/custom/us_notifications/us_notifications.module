<?php

define('US_NOTIFY_MAIL_TITLE', '[site:name] :: The class "[node:title]" has been updated');

function us_notifications_node_update($node) {
  if (!empty($node->status)) {
    us_notifications_send($node);
  }
}

/**
 * Get users who should be notified of a change on a class.
 *
 * @param $node
 * @return array
 *
 * @see us_classes_involvement_render()
 */
function us_notifications_get_users($node) {
  try {
    $wrapper = entity_metadata_wrapper('node', $node);

    // Start the list of users who should be notified.
    $ids = array();

    // Proposed.
    $uid = $wrapper->author->uid->value();
    $ids[] = $uid;

    // Facilitating.
    $field_name = 'field_facilitators';
    $uids = $wrapper->$field_name->raw();
    foreach ($uids as $uid) {
      $ids[] = $uid;
    }

    // Flagged.
    $flag_name = 'subscribe_class';
    $flags = flag_get_entity_flags('node', $node->nid, $flag_name);
    foreach ($flags as $data) {
      $ids[] = $data->uid;
    }

    return array_unique($ids);
  }
  catch(\EntityMetadataWrapperException $e) {
    // Do nothing. If this fails we have done something wrong.
  }
}

/**
 * Implements hook_mail().
 */
function us_notifications_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}

function us_notifications_send($node) {
  // Check attributes (fields or properties of the class node) we care about.
  // Note we can't use format_plural() because this only refers to grammar, not
  // actual plural values. Or does it?
  $attributes['title'] = array(
    'label' => 'Title',
    'plural' => FALSE,
  );
  $attributes['body'] = array(
    'label' => 'Description',
    'plural' => FALSE,
    'column' => 'value',
  );
  $attributes['field_dates'] = array(
    'label' => 'Dates',
    'plural' => TRUE,
  );
  $attributes['field_facilitators'] = array(
    'label' => 'Facilitators',
    'plural' => TRUE,
  );

  try {
    // Note EntityMetadataWrapper keys are cached.
    $wrapper = entity_metadata_wrapper('node', $node);
    $original_wrapper = entity_metadata_wrapper('node', $node->original);

    // Iterate over the attributes to see if any have changed.
    // @todo Find a good way to drill down to the output value, becuase body for
    //   example has a different array structure, with additional array elements
    //   from original to updated, even when the value->value is the same.
    foreach ($attributes as $name => $info) {
      $original = isset($info['column']) ? $original_wrapper->$name->{$info['column']}->value() : $original_wrapper->$name->value();
      $updated = isset($info['column']) ? $wrapper->$name->{$info['column']}->value() : $wrapper->$name->value();
      if (serialize($original) !== serialize($updated)) {
        $changed[] = $info['label'];
      }
    }
  }
  catch(\EntityMetadataWrapperException $e) {
    // Do nothing. If this fails we have done something wrong.
  }

  // Only bother continuing if changes we care about have happened.
  if (empty($changed)) {
    return;
  }

  // Build the message body.
  $body[] = "Hi [user:name]";

  $count = count($changed);
  $last = array_pop($changed);
  $args = array(
    '!attribute' => $last,
    '!attributes' => implode(', ', $changed) . ' and ' . $last,
  );
  $body[] = format_plural($count, 'The class !attribute has changed.', 'The class !attributes have changed.', $args);

  $body[] = 'You can see the updates at the following url:
[node:url]';

  $body[] = 'You are receiving this email because you are proposing, facilitating, or following this class. To stop receiving it\'s updates, you can click "+ Change my involvement" at [node:url].';

  $body[] = '-- [site:name] team
[site:url]';

  // Get users subscribed to this class.
  $uids = us_notifications_get_users($node);
  $users = user_load_multiple($uids);
  foreach ($users as $user) {
    // Make sure user can access node before showing node information.
    if (!node_access('view', $node, $user)) {
      continue;
    }

    $raw_values = array(
      'subject' => US_NOTIFY_MAIL_TITLE,
      'body'  => implode("\n\n", $body),
    );

    $message = array();
    foreach ($raw_values as $k => $v) {
      $message[$k] = token_replace(t($v), array('node' => $node, 'user' => $user), array('sanitize' => FALSE));
    }

    drupal_mail('us_notifications', 'us_notifications_mail', $user->mail, user_preferred_language($user), $message);
  }
}
