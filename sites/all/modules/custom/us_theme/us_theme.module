<?php
/**
 * @file
 * Code for the us_theme feature.
 */

include_once 'us_theme.features.inc';

/**
 * Utopia School default theme.
 */
define('US_THEME_DEFAULT', 'us_kalatheme');

/**
 * Swaps the default theme with ours.
 */
function us_theme_set_default() {
  // Stash old theme name so we can toggle between the two.
  $old = variable_get('theme_default', 'bartik');
  variable_set('theme_default_old', $old);

  // Set our new theme.
  theme_enable(array(US_THEME_DEFAULT));
  variable_set('theme_default', US_THEME_DEFAULT);

  // Disable the old theme.
  theme_disable(array($old));
}

/**
 * Restores the default theme.
 */
function us_theme_restore_default() {
  // Restore the old theme.
  $old = variable_get('theme_default_old', 'bartik');
  theme_enable(array($old));
  variable_set('theme_default', $old);

  // Disable the new theme.
  theme_disable(array(US_THEME_DEFAULT));
}

/**
 * Implements hook_query_TAG_alter().
 *
 * @see us_theme_pyramid()
 */
function us_theme_query_random_alter($query){
  $query->orderRandom();
}

/**
 * Generates an SVG 4-triangle image rotator.
 *
 * @param $h
 *   The total height of the pyramid.
 *
 * @return string
 *   A rendered pyramid image rotator. This should look like:
 * @code
 * <svg id="logo" width="154" height="134">
 *   <pattern id="1" patternUnits="userSpaceOnUse" width="77" height="77">
 *   <image xlink:href="/sites/all/themes/us_kalatheme/images/8.jpg" x="0" y="0" width="77" height="77" />
 *   </pattern>
 *   <pattern id="2" patternUnits="userSpaceOnUse" width="77" height="77">
 *   <image xlink:href="/sites/all/themes/us_kalatheme/images/2.jpg" x="0" y="0" width="77" height="77" />
 *   </pattern>
 *   <pattern id="3" patternUnits="userSpaceOnUse" width="77" height="77" patternTransform="rotate(180)">
 *   <image xlink:href="/sites/all/themes/us_kalatheme/images/3.jpg" x="0" y="0" width="77" height="77" />
 *   </pattern>
 *   <pattern id="4" patternUnits="userSpaceOnUse" width="77" height="77">
 *   <image xlink:href="/sites/all/themes/us_kalatheme/images/4.jpg" x="0" y="0" width="77" height="77" />
 *   </pattern>
 *   <path class="tri one" d="M 38.5,0 L 77,67 L 0,67 z" fill="url(#1)" transform="translate(38.5,0)" stroke="black" stroke-width="0.5" />
 *   <path class="tri two" d="M 38.5,0 L 77,67 L 0,67 z" fill="url(#2)" transform="translate(0,67)" stroke="black" stroke-width="0.5" />
 *   <path class="tri three" d="M 38.5,0 L 77,67 L 0,67 z" fill="url(#3)" transform="rotate(180,77,77)  translate(38.5,20)" stroke="black" stroke-width="0.5" />
 *   <path class="tri four" d="M 38.5,0 L 77,67 L 0,67 z" fill="url(#4)" transform="translate(77,67)" stroke="black" stroke-width="0.5" />
 *   </svg>
 * @code
 *
 * @see us_theme_query_random_alter()
 */
function us_theme_pyramid($h) {
  global $base_url;

  // Calculate width, and 4-triangle SVG placement, given a height.
  $w = $h / (sqrt(3) / 2);
  $d = 'M ' . $w / 4 . ',0 L ' . $w / 2 . ',' . $h / 2 . ' L 0,' . $h / 2 . ' z';

  // Ensure we have a square image style to match our width.
  $style_name = 'pyramid';
  // Regenerate the style if the width doesn't match.
  if ($w != variable_get('us_theme_pyramid_width')) {
    image_style_delete(image_style_load($style_name));
  }
  if (!$style = image_style_load($style_name)) {
    // Create it.
    $style = image_style_save(array('name' => $style_name));
    $effect = array(
      'name' => 'image_scale_and_crop',
      'data' => array(
        'width' => $w / 2,
        'height' => $w / 2,
      ),
      'isid' => $style['isid'],
    );
    image_effect_save($effect);
    variable_set('us_theme_pyramid_width', $w);
  }

  // Get images.
  $entity_type = 'node';
  $bundle = 'resource';
  $published_column = 'status';
  $field_name = 'field_resource_image';
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', $entity_type)
    ->entityCondition('bundle', $bundle)
    ->propertyCondition($published_column, 1)
    ->fieldCondition($field_name, 'fid', 'NULL', '!=')
    ->addTag('random')
    ->range(0, 4)
    ->execute();
  $entities = isset($result[$entity_type]) ? entity_load($entity_type, array_keys($result[$entity_type])) : array();

  // Build an array of image style paths from our uploaded resources.
  $resources = array(0 => NULL);
  $hrefs = array(0 => NULL);
  foreach ($entities as $entity) {
    $image = field_get_items($entity_type, $entity, $field_name);
    if ($path = $image[0]['uri']) {
      $hrefs[] = image_style_url($style_name, $path);
      $resources[] = array(
        'image' => image_style_url($style_name, $path),
        'node' => $base_url . '/' . drupal_get_path_alias('node/' . $entity->nid),
        'title' => check_plain($entity->title),
      );
    }
  }

  // SVG pattern attributes.
  $pattern_attributes = array();
  $pattern_attributes['patternUnits'] = 'userSpaceOnUse';
  $pattern_attributes['width'] = $w / 2;
  $pattern_attributes['height'] = $w / 2;

  // SVG pattern image attributes.
  $image_attributes = array();
  $image_attributes['x'] = 0;
  $image_attributes['y'] = 0;
  $image_attributes['width'] = $w / 2;
  $image_attributes['height'] = $w / 2;

  // Render SVG patterns.
  $patterns = '';
  // Loop over 4 items to build the patterns.
  for ($i = 1; $i <= 4; $i++) {
    $pattern_attributes['id'] = $i;
    // Give a backup image, in case there are less than 4 iamges in the library.
    $image_attributes['xlink:href'] = isset($resources[$i]) ? $resources[$i]['image'] : '/sites/all/themes/us_kalatheme/images/3.jpg';
    // Rotate the third image in the pyramid, since we rotate the triangle.
    $pattern_attributes['patternTransform'] = $i == 3 ? 'rotate(180)' : NULL;
    $patterns .= '<pattern ' . drupal_attributes($pattern_attributes) . ' >';
    $patterns .= '<image ' . drupal_attributes($image_attributes) . ' />';
    $patterns .= '</pattern>';
  }

//  $pattern_attributes['id'] = 1;
//  $image_attributes['xlink:href'] = '/sites/all/themes/us_kalatheme/images/8.jpg';
//  $patterns .= '<pattern ' . drupal_attributes($pattern_attributes) . ' >';
//  $patterns .= '<image ' . drupal_attributes($image_attributes) . ' />';
//  $patterns .= '</pattern>';
//
//  $pattern_attributes['id'] = 2;
//  $image_attributes['xlink:href'] = '/sites/all/themes/us_kalatheme/images/2.jpg';
//  $patterns .= '<pattern ' . drupal_attributes($pattern_attributes) . ' >';
//  $patterns .= '<image ' . drupal_attributes($image_attributes) . ' />';
//  $patterns .= '</pattern>';
//
//  $pattern_attributes['id'] = 3;
//  $pattern_attributes['patternTransform'] = 'rotate(180)';
//  $image_attributes['xlink:href'] = '/sites/all/themes/us_kalatheme/images/3.jpg';
//  $patterns .= '<pattern ' . drupal_attributes($pattern_attributes) . ' >';
//  $patterns .= '<image ' . drupal_attributes($image_attributes) . ' />';
//  $patterns .= '</pattern>';
//
//  $pattern_attributes['id'] = 4;
//  $image_attributes['xlink:href'] = '/sites/all/themes/us_kalatheme/images/4.jpg';
//  $patterns .= '<pattern ' . drupal_attributes($pattern_attributes) . ' >';
//  $patterns .= '<image ' . drupal_attributes($image_attributes) . ' />';
//  $patterns .= '</pattern>';

  // SVG path attributes.
  $path_attributes = array();
  $path_attributes['d'] = $d;
  $path_attributes['stroke'] = 'black';
  $path_attributes['stroke-width'] = '0.5';

  // Render SVG paths.
  $paths = '';

  $key = 1;
  $path_attributes['fill'] = 'url(#'. $key .')';
  $path_attributes['transform'] = 'translate(' . $w / 4 . ',0)';
  $paths .= isset($resources[$key]) ? '<a xlink:href= "'. $resources[$key]['node'] .'" xlink:title="'. $resources[$key]['title'] .'">' : '';
  $paths .= '<path ' . drupal_attributes($path_attributes) . ' />';
  $paths .= isset($resources[$key]) ? '</a>' : '';

  $key = 2;
  $path_attributes['fill'] = 'url(#'. $key .')';
  $path_attributes['transform'] = 'translate(0,' . $h / 2 . ')';
  $paths .= isset($resources[$key]) ? '<a xlink:href= "'. $resources[$key]['node'] .'" xlink:title="'. $resources[$key]['title'] .'">' : '';
  $paths .= '<path ' . drupal_attributes($path_attributes) . ' />';
  $paths .= isset($resources[$key]) ? '</a>' : '';

  $key = 3;
  $path_attributes['fill'] = 'url(#'. $key .')';
  $path_attributes['transform'] = 'rotate(180,' . $w / 2 . ',' . $w / 2 . ') translate(' . ($w / 4) . ',' . ($w - $h) . ')';
  $paths .= isset($resources[$key]) ? '<a xlink:href= "'. $resources[$key]['node'] .'" xlink:title="'. $resources[$key]['title'] .'">' : '';
  $paths .= '<path ' . drupal_attributes($path_attributes) . ' />';
  $paths .= isset($resources[$key]) ? '</a>' : '';

  $key = 4;
  $path_attributes['fill'] = 'url(#'. $key .')';
  $path_attributes['transform'] = 'translate(' . $w / 2 . ',' . $h / 2 . ')';
  $paths .= isset($resources[$key]) ? '<a xlink:href= "'. $resources[$key]['node'] .'" xlink:title="'. $resources[$key]['title'] .'">' : '';
  $paths .= '<path ' . drupal_attributes($path_attributes) . ' />';
  $paths .= isset($resources[$key]) ? '</a>' : '';

  // SVG wrapper attributes.
  $svg_attributes = array();
  $svg_attributes['id'] = 'logo';
  $svg_attributes['width'] = $w;
  $svg_attributes['height'] = $h;

  // Render SVG wrapper.
  $svg = '';
  $svg .= '<svg ' . drupal_attributes($svg_attributes) . ' >';
  $svg .= $patterns;
  $svg .= $paths;
  $svg .= '</svg>';

  return $svg;
}