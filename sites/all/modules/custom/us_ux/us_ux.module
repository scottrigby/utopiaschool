<?php
/**
 * @file
 * Code for the us_ux feature.
 */

include_once 'us_ux.features.inc';

/**
 * Implements hook_element_info_alter().
 *
 * @see better_formats_element_info_alter()
 */
function us_ux_element_info_alter(&$type) {
  // Our process callback must run immediately after filter_process_format().
  $filter_process_format_location = array_search('filter_process_format', $type['text_format']['#process']);
  $replacement = array('filter_process_format', 'us_ux_filter_process_format');
  array_splice($type['text_format']['#process'], $filter_process_format_location, 1, $replacement);
}

/**
 * Process callback for form elements that have a text format selector attached.
 *
 * This callback runs after filter_process_format() and performs additional
 * modifications to the form element.
 *
 * @param array $element
 *   The element render array.
 *
 * @return array
 *   The processed element.
 *
 * @see better_formats_filter_process_format()
 * @see filter_process_format()
 */
function us_ux_filter_process_format($element) {
  // Hides the filter guidelines text.
  $element['format']['guidelines']['#access'] = FALSE;
  // Hides the filter tips link.
  $element['format']['help']['#access'] = FALSE;
  // Changes the format element from a fieldset to a div (removes the grey
  // border from below the textarea).
  $element['format']['#type'] = 'container';

  return $element;
}

/**
 * Implements hook_field_access().
 *
 * Note field_permissions module is overkill here.
 */
function us_ux_field_access($op, $field, $entity_type, $entity, $account) {
  $is_committee = in_array('committee', $account->roles);

  // Potentially hide this too. For now, we've determined it can be public.
//  if ($field['field_name'] == 'field_collaboration_info' && $op == 'view') {
//    return $is_committee;
//  }

  return TRUE;
}

/**
 * Implements hook_views_pre_view().
 */
function us_ux_views_pre_view(&$view, &$display_id, &$args) {
  if ($view->name == 'classes' && $display_id == 'block_1') {
    if (arg(0) == 'user' && !arg(2)) {
      global $user;
      if ($user->uid == arg(1)) {
        // Use user-specific language.
        $header = '<p><a class="button" href="/node/add/class">+ Submit a new proposal</a></p>';
        $empty = '<div class="alert alert-warning">You have not submitted any classes yet.</div>';
      }
      else {
        $header = '';
        $empty = '<div class="alert alert-warning">This person has not submitted any classes yet.</div>';
      }
      $view->set_item_option('block_1', 'header', 'area', 'content', $header);
      $view->set_item_option('block_1', 'header', 'area', 'format', 'full_html');
      $view->set_item_option('block_1', 'header', 'area', 'empty', 1);
      $view->set_item_option('block_1', 'empty', 'area', 'content', $empty);
      $view->set_item_option('block_1', 'empty', 'area', 'format', 'full_html');
    }
  }
}

/**
 * Implements hook_node_view().
 */
function us_ux_node_view($node, $view_mode) {
  if ($view_mode == 'teaser') {
    unset($node->content['links']['comment']);
  }
}

function us_ux_form_node_form_alter(&$form) {
  global $user;
  if (isset($form['revision_information'])) {
    // Hide revision fields on node add form.
    // @TODO Should be removed in D8 #308820.
    // Also don't show it at all to non-organizers.
    if (!isset($form['#node']->nid) || !in_array('committee', $user->roles)) {
      $form['revision_information']['#access'] = FALSE;
    }
    else {
      // Simplify revision field for organizers.
      $form['revision_information']['#type'] = 'container';
    }
  }
}

/**
 * Preprocess the themed user picture to have a default.
 *
 * @see template_preprocess_user_picture()
 */
function us_ux_preprocess_user_picture(&$variables) {
  $variables['user_picture'] = '';
  if (variable_get('user_pictures', 0)) {
    $account = $variables['account'];
    if (!empty($account->picture)) {
      if (is_numeric($account->picture)) {
        $account->picture = file_load($account->picture);
      }
      if (!empty($account->picture->uri)) {
        $filepath = $account->picture->uri;
      }
    }
    elseif (variable_get('user_picture_default', '')) {
      $filepath = variable_get('user_picture_default', '');
    }
    if (isset($filepath)) {
      $alt = t("@user's picture", array('@user' => format_username($account)));
      // Allow passing a user_picture_style key through the variables param.
      $style = isset($variables['user_picture_style']) ? $variables['user_picture_style'] : variable_get('user_picture_style', '');
      // If the image does not have a valid Drupal scheme (for eg. HTTP),
      // don't load image styles.
      if (module_exists('image') && file_valid_uri($filepath) && !empty($style)) {
        $variables['user_picture'] = theme('image_style', array('style_name' => $style, 'path' => $filepath, 'alt' => $alt, 'title' => $alt));
      }
      else {
        $variables['user_picture'] = theme('image', array('path' => $filepath, 'alt' => $alt, 'title' => $alt));
      }
      if (!empty($account->uid) && user_access('access user profiles')) {
        $attributes = array('attributes' => array('title' => t('View user profile.')), 'html' => TRUE);
        $variables['user_picture'] = l($variables['user_picture'], "user/$account->uid", $attributes);
      }
    }
  }
}
