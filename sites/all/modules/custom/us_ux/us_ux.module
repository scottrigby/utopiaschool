<?php

/**
 * @file
 * Hooks and API functions for Utopia School UX module.
 */

define ('US_UX_NAME_FIELD', 'field_name');

/**
 * Implements hook_element_info_alter().
 *
 * @see better_formats_element_info_alter()
 */
function us_ux_element_info_alter(&$type) {
  // Our process callback must run immediately after filter_process_format().
  $filter_process_format_location = array_search('filter_process_format', $type['text_format']['#process']);
  $replacement = array('filter_process_format', 'us_ux_filter_process_format');
  array_splice($type['text_format']['#process'], $filter_process_format_location, 1, $replacement);
}

/**
 * Process callback for form elements that have a text format selector attached.
 *
 * This callback runs after filter_process_format() and performs additional
 * modifications to the form element.
 *
 * @param array $element
 *   The element render array.
 *
 * @return array
 *   The processed element.
 *
 * @see better_formats_filter_process_format()
 * @see filter_process_format()
 */
function us_ux_filter_process_format($element) {
  // Hides the filter guidelines text.
  $element['format']['guidelines']['#access'] = FALSE;
  // Hides the filter tips link.
  $element['format']['help']['#access'] = FALSE;
  // Changes the format element from a fieldset to a div (removes the grey
  // border from below the textarea).
  $element['format']['#type'] = 'container';

  return $element;
}

/**
 * Implements hook_field_access().
 *
 * Note field_permissions module is overkill here.
 */
function us_ux_field_access($op, $field, $entity_type, $entity, $account) {
  $is_committee = in_array('committee', $account->roles);

  if ($field['field_name'] == 'field_status' && $op == 'edit') {
    return $is_committee;
  }

  // Potentially hide this too. For now, we've determined it can be public.
//  if ($field['field_name'] == 'field_collaboration_info' && $op == 'view') {
//    return $is_committee;
//  }

  return TRUE;
}

/**
 * Implements hook_views_pre_view().
 */
function us_ux_views_pre_view(&$view, &$display_id, &$args) {
  if ($view->name == 'classes' && $display_id == 'block_1') {
    if (arg(0) == 'user' && !arg(2)) {
      global $user;
      if ($user->uid == arg(1)) {
        // Use user-specific language.
        $header = '<p><a class="button" href="/node/add/class">+ Submit a new proposal</a></p>';
        $empty = '<div class="alert alert-warning">You have not submitted any classes yet.</div>';
      }
      else {
        $header = '';
        $empty = '<div class="alert alert-warning">This person has not submitted any classes yet.</div>';
      }
      $view->set_item_option('block_1', 'header', 'area', 'content', $header);
      $view->set_item_option('block_1', 'header', 'area', 'format', 'full_html');
      $view->set_item_option('block_1', 'header', 'area', 'empty', 1);
      $view->set_item_option('block_1', 'empty', 'area', 'content', $empty);
      $view->set_item_option('block_1', 'empty', 'area', 'format', 'full_html');
    }
  }
}

/**
 * Implements hook_username_alter().
 *
 * The Name module has way too much that we don't want. But it also solves some
 * things in a nicer way than Realname module (which has other things we don't
 * want, and also does not support profile2).
 *
 * @see name_username_alter()
 */
function us_ux_username_alter(&$name, $account) {
  // Don't alter anonymous users or objects that do not have any user ID.
  if (empty($account->uid)) {
    return;
  }

  // We store the user name in a custom profile2 field.
  if (field_info_instance('profile2', US_UX_NAME_FIELD, 'main') && $data = profile2_load_by_user($account, 'main')) {
    if ($items = field_get_items('profile2', $data, US_UX_NAME_FIELD)) {
      if (isset($items[0]['safe_value']) && drupal_strlen($items[0]['safe_value'])) {
        $name = $items[0]['safe_value'];
      }
    }
  }
}

/**
 * Implements hook_node_view().
 */
function us_ux_node_view($node, $view_mode) {
  if ($view_mode == 'teaser') {
    unset($node->content['links']['comment']);
  }
}
