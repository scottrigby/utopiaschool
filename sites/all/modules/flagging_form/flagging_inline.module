<?php

/**
 * @file
 * Provides menu callbacks for displaying the flagging forms inline.
 */

/**
 * Implements hook_menu().
 */
function flagging_inline_menu() {
  // Editing a flagging.
  $items['flag/flagging/%flag/%content_id/edit/inline'] = array(
    'page callback' => 'flagging_inline_edit_flagging',
    'page arguments' => array(2, 3),
    'title callback' => '_flag_menu_title',
    'title arguments' => array(2),
    'access callback' => '_flagging_form_flagging_access',
    'access arguments' => array('update', 2, 3),
    'delivery callback' => 'ajax_deliver',
  );

  // Creating a flagging.
  $items['flag/flagging/%flag/%content_id/create/inline'] = array(
    'page callback' => 'flagging_inline_edit_flagging',
    'page arguments' => array(2, 3),
    'title callback' => '_flag_menu_title',
    'title arguments' => array(2),
    'access callback' => '_flagging_form_flagging_access',
    'access arguments' => array('create', 2, 3),
    'delivery callback' => 'ajax_deliver',
  );

  // Deleting a flagging.
  $items['flag/flagging/%flag/%content_id/delete/inline'] = array(
    'page callback' => 'flagging_inline_delete_flagging',
    'page arguments' => array(2, 3),
    'title callback' => '_flag_menu_title',
    'title arguments' => array(2),
    'access callback' => '_flagging_form_flagging_access',
    'access arguments' => array('delete', 2, 3),
    'delivery callback' => 'ajax_deliver',
  );

  return $items;
}

/**
 * Implements hook_flagging_form_interactions().
 */
function flagging_inline_flagging_form_interactions() {
  return array(
    'flagging_inline' => array(
      'title' => t('Inline'),
      'description' => t('Forms are displayed inline, if JavaScript is available.'),
      'weight' => 0,
    ),
  );
}

/**
 * Implements hook_flagging_form_link_alter().
 *
 * Alters the links flagging_form.module generates.
 */
function flagging_inline_flagging_form_link_alter(&$link, $flag) {
  if ($flag->form_interaction == 'flagging_inline') {
    // Bug in Drupal's ajax.js: we must have a trailing '/'.
    $link['href'] .= '/inline/';
    $link['attributes']['class'] = 'flagging-inline use-ajax';

    // @todo: See Amitai's http://drupal.org/node/858764, which tries to
    // standardize js/css inclusion.
    // We need the CSS for .flag-message:
    drupal_add_css(drupal_get_path('module', 'flag') . '/theme/flag.css');
    // We need the anonyous-user handling (but nothing else):
    // @todo: split flag.js into flag-common.js and flag-toggle.js?
    drupal_add_js(drupal_get_path('module', 'flag') . '/theme/flag.js');

    // Finally, our own code:
    drupal_add_library('flagging_inline', 'flagging_inline');
  }
}

/**
 * Implements hook_library().
 */
function flagging_inline_library() {
  $libraries['flagging_inline'] = array(
    'title' => 'Flag Inline',
    'version' => '1.0',
    'js' => array(
      // Omitting the 'group' bellow will use a default group of JS_LIBRARY,
      // which, since lighter than ajax.js's, won't enable us to add our
      // command(s) to the non-yet-existing Drupal.ajax.prototype.commands.
      drupal_get_path('module', 'flagging_inline') . '/flagging_inline.js' => array('group' => JS_DEFAULT),
      drupal_get_path('module', 'flagging_inline') . '/jquery.xLazyLoader.js' => array('group' => JS_LIBRARY),
    ),
    'dependencies' => array(
      array('system', 'drupal.ajax'),
      array('system', 'jquery.form'),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_form_alter().
 */
function flagging_inline_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form_state['flag_is_using_inline'])) {
    // Make the buttons submit via ajax. (This could also be done by adding
    // class="use-ajax-submit" to buttons, but bugs in Drupal's misc/ajax.js
    // prevent this from working.)
    if (isset($form['actions'])) {
      foreach (element_children($form['actions']) as $button) {
        // For performance, we handle cancel buttons in our JavaScript.
        if ($button != 'cancel') {
          $form['actions'][$button]['#ajax']['path'] = $_GET['q'];
        }
      }
    }
  }
}

/**
 * Menu callback.
 */
function flagging_inline_edit_flagging($flag, $content_id) {
  $flagging = $flag->get_flagging($content_id);
  if (!$flagging) {
    // New flagging.
    $flagging = $flag->new_flagging($content_id);
  }
  $form_state = array(
    'no_redirect' => TRUE,
    // Tell our hook_form_alter() to kick in.
    'flag_is_using_inline' => TRUE,
    'flag_suppress_messages' => TRUE,
    'build_info' => array(
      'args' => array($flagging),
    ),
  );
  $form = drupal_build_form('flagging_form_flagging_form', $form_state);
  return flagging_inline_process_form_result($form, $form_state, $flag, $content_id);
}

/**
 * Menu callback.
 */
function flagging_inline_delete_flagging($flag, $content_id) {
  $flagging = $flag->get_flagging($content_id);
  if (!$flagging) {
    // The item isn't flagged. The form function will deal with this error.
    $flagging = $flag->new_flagging($content_id);
  }
  $form_state = array(
    'no_redirect' => TRUE,
    // Tell our hook_form_alter() to kick in.
    'flag_is_using_inline' => TRUE,
    'flag_suppress_messages' => TRUE,
    'build_info' => array(
      'args' => array($flagging),
    ),
  );
  $form = drupal_build_form('flagging_form_flagging_delete_form', $form_state);
  return flagging_inline_process_form_result($form, $form_state, $flag, $content_id);
}

/**
 * Handles submission of the form.
 */
function flagging_inline_process_form_result($form, $form_state, $flag, $content_id) {
  $commands = array();

  if (!empty($form_state['executed'])) {
    // The form has been submitted. Either redirect to a new url or close the inline form.
    if (is_array($form_state['redirect'])) {
      $target = $form_state['redirect'][0];
    }
    else {
      $target = $form_state['redirect'];
    }
    // If there's an ajax version for the target path, use it.
    $try = menu_get_item($target . '/inline');
    if ($try && strpos($try['path'], '/inline') !== FALSE) {
      // Yes, there is. Do an "internal" redirect.
      $target = $target . '/inline';
      _flagging_inline_set_drupal_path($target);
      menu_execute_active_handler($target);
      drupal_exit();
    }
    else {
      // No, there's no ajax page to go to. Close the inline form, and
      // update the flag link.
      $commands[] = flagging_inline_command_dismiss($flag, $content_id, array());
      $commands[] = flagging_inline_command_update_link($flag, $content_id, !empty($form_state['flag_status_has_changed']));
    }
  }
  else {
    // The form hasn't been submitted. So we just need to display it.
    flagging_inline_display(TRUE);
    $commands[] = flagging_inline_command_display($form, $flag, $content_id, array('title' => drupal_get_title()));
  }

  $output = array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
  return $output;
}

/**
 * Fool the system to think the current URL is $path.
 *
 * Used for "internal" redirections. This doesn't need to be foolproof: just
 * enough to handle our own code.
 */
function _flagging_inline_set_drupal_path($path) {
  // Used by our form_alter():
  $_GET['q'] = $path;
  // Used as the action='...' for <form> tags:
  $_SERVER['REQUEST_URI'] = url($path);
  drupal_static_reset('element_info');
}

/**
 * Creates a Drupal AJAX command to display the form.
 */
function flagging_inline_command_display($content, $flag, $content_id, $options) {
  return array(
    'command' => 'flagging_inline_display',
    'content' => render($content),
    'flagName' => $flag->name,
    'contentId' => $content_id,
    'options' => $options,
  );
}

/**
 * Creates a Drupal AJAX command to hide the form.
 */
function flagging_inline_command_dismiss($flag, $content_id, $options) {
  return array(
    'command' => 'flagging_inline_dismiss',
    'flagName' => $flag->name,
    'contentId' => $content_id,
    'options' => $options,
  );
}

/**
 * Creates a Drupal AJAX command to update a flag link.
 */
function flagging_inline_command_update_link($flag, $content_id, $status_has_changed) {
  // @todo: We're mimicing here the JavsScript structure flag_page() builds.
  // Let's factor out the flag_page() code and use it instead.
  return array(
    'command' => 'flagging_inline_update_link',
    'flagName' => $flag->name,
    'contentId' => $content_id,
    // @todo: it was pointed out already, in a comment in flagging_form.module,
    // that we don't have a special message to print when a flagging is updated
    // (as opposed to created or deleted). When we factor flag_page() we should
    // make things future-proof to also work when we do have such a message.
    'newLink' => $flag->theme($flag->is_flagged($content_id) ? 'unflag' : 'flag', $content_id, array('after_flagging' => $status_has_changed)),
  );
}

/**
 * Creates a Drupal AJAX 'xLazyLoader' command.
 */
function flagging_inline_command_xlazyloader($options = array()) {
  return array(
    'command' => 'xlazyloader',
    'options' => $options,
  );
}

/**
 * Provides an easy way of representing the status of inline form.
 */
function flagging_inline_display($options = NULL) {
  $status = &drupal_static(__FUNCTION__, FALSE);
  if (isset($options)) {
    // Make sure that an array is passed in as the options.
    $status = $options;
  }
  return $status;
}

/**
 * Implement hook_ajax_render_alter().
 *
 * Using the xLazyLoader library and command, load additional css and
 * javascript into the page.
 *
 */
function flagging_inline_ajax_render_alter(&$commands) {
  if (flagging_inline_display()) {
    $loader = array();
    $allowed_media = array('all', 'screen');

    // Ensure that the page doesn't reload what it already has.
    $current_assets = $_POST['ajax_page_state'];

    // Inject additional JavaScript and CSS to the browser's client.
    $css = drupal_add_css();
    drupal_alter('css', $css);
    foreach ($css as $data => $options) {
      if ($options['type'] == 'file' && in_array($options['media'], $allowed_media) && !isset($current_assets['css'][$data])) {
        $loader['css'][] = base_path() . $options['data'];
      }
    }
    $scripts = drupal_add_js();
    drupal_alter('js', $scripts);
    foreach ($scripts as $data => $options) {
      if ($options['type'] == 'file' && !isset($current_assets['js'][$data])) {
        $loader['js'][] = base_path() . $options['data'];
      }
    }
    if (!empty($loader)) {
      array_unshift($commands, flagging_inline_command_xlazyloader($loader));
    }

    // Prepend status messages to the ??? content.
    $commands[] = ajax_command_prepend('.flagging-inline', theme('status_messages'));
  }
}
